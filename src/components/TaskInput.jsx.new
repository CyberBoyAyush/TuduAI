/**
 * File: TaskInput.jsx
 * Purpose: Input for creating new tasks with AI parsing
 */
import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { parseTaskInput } from '../lib/openai'
import TimeSuggestions from './TimeSuggestions'
import UrgencySelector from './UrgencySelector'
import { PlusIcon, BoltIcon, ClockIcon } from '@heroicons/react/24/outline'

export default function TaskInput({ onAddTask }) {
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [parsedTask, setParsedTask] = useState(null)
  const [error, setError] = useState(null)
  
  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!input.trim()) return
    
    setLoading(true)
    setError(null)
    
    try {
      // Parse the input using OpenAI
      const result = await parseTaskInput(input)
      
      // Check if we need additional information
      if (!result.dueDate || !result.urgency) {
        // We'll handle this with our UI
        setParsedTask(result)
      } else {
        // We have everything we need, add the task
        onAddTask(result)
        resetForm()
      }
    } catch (err) {
      setError('Failed to parse your task. Please try again.')
      console.error('Task parsing error:', err)
    } finally {
      setLoading(false)
    }
  }
  
  const resetForm = () => {
    setInput('')
    setParsedTask(null)
    setError(null)
  }
  
  const finalizeTask = (updates = {}) => {
    // Add the task with any additional details provided
    onAddTask({
      ...parsedTask,
      ...updates
    })
    resetForm()
  }
  
  return (
    <div className="w-full max-w-5xl mx-auto bg-transparent mb-8">
      {parsedTask && !parsedTask.urgency ? (
        <div className="bg-neutral-900 rounded-xl shadow-lg border border-neutral-700 p-6">
          <h2 className="text-xl font-semibold mb-4 text-white">
            How urgent is this task? (1-5)
          </h2>
          
          <div className="mb-2 text-lg text-white">
            <span className="text-lg font-medium">{parsedTask.title}</span>
          </div>
          
          <UrgencySelector 
            onChange={(urgency) => finalizeTask({ 
              urgency,
              dueDate: parsedTask.dueDate 
            })}
            initialValue={3}
          />
        </div>
      ) : parsedTask && !parsedTask.dueDate ? (
        <div className="bg-neutral-900 rounded-xl shadow-lg border border-neutral-700 p-6">
          <h3 className="font-medium text-white text-xl mb-4">
            When is "{parsedTask.title}" due?
          </h3>
          
          <TimeSuggestions 
            onSelect={(dueDate) => finalizeTask({ 
              dueDate,
              urgency: parsedTask.urgency 
            })}
          />
          
          <button
            onClick={resetForm}
            className="mt-4 text-sm text-gray-400 hover:text-gray-300"
          >
            Cancel
          </button>
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="relative">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Learn to code"
              className="w-full py-2 px-4 rounded-md border border-neutral-600 bg-neutral-800 text-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 text-lg"
              disabled={loading}
            />
            
            {!loading && input.trim() && (
              <motion.button
                type="submit"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 py-1 px-4 rounded-md bg-indigo-600 hover:bg-indigo-700 text-white font-medium flex items-center justify-center"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                Add
              </motion.button>
            )}
            
            {loading && (
              <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                <svg className="animate-spin h-5 w-5 text-indigo-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </div>
            )}
          </div>
          
          {error && (
            <motion.div 
              className="p-3 bg-red-900/20 text-red-300 rounded-lg"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
            >
              {error}
            </motion.div>
          )}
          
          <div className="text-xs text-gray-500 dark:text-gray-400 flex items-center">
            <BoltIcon className="w-3 h-3 mr-1" />
            <span>Powered by GPT-4.1 Mini</span>
          </div>
        </form>
      )}
    </div>
  )
}
